// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: proto/filesync.proto

package filesync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileSyncService_State_FullMethodName        = "/FileSyncService/State"
	FileSyncService_MetaData_FullMethodName     = "/FileSyncService/MetaData"
	FileSyncService_SyncFiles_FullMethodName    = "/FileSyncService/SyncFiles"
	FileSyncService_ModifyFiles_FullMethodName  = "/FileSyncService/ModifyFiles"
	FileSyncService_CompareFiles_FullMethodName = "/FileSyncService/CompareFiles"
)

// FileSyncServiceClient is the client API for FileSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSyncServiceClient interface {
	State(ctx context.Context, in *StateReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StateRes], error)
	MetaData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MetaDataReq, FileMetaData], error)
	SyncFiles(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FileSyncRequest, FileSyncResponse], error)
	ModifyFiles(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MetaDataChunk, FileMetaData], error)
	CompareFiles(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FileMetaData, FileChunk], error)
}

type fileSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSyncServiceClient(cc grpc.ClientConnInterface) FileSyncServiceClient {
	return &fileSyncServiceClient{cc}
}

func (c *fileSyncServiceClient) State(ctx context.Context, in *StateReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StateRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileSyncService_ServiceDesc.Streams[0], FileSyncService_State_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StateReq, StateRes]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSyncService_StateClient = grpc.ServerStreamingClient[StateRes]

func (c *fileSyncServiceClient) MetaData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MetaDataReq, FileMetaData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileSyncService_ServiceDesc.Streams[1], FileSyncService_MetaData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MetaDataReq, FileMetaData]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSyncService_MetaDataClient = grpc.BidiStreamingClient[MetaDataReq, FileMetaData]

func (c *fileSyncServiceClient) SyncFiles(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FileSyncRequest, FileSyncResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileSyncService_ServiceDesc.Streams[2], FileSyncService_SyncFiles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileSyncRequest, FileSyncResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSyncService_SyncFilesClient = grpc.BidiStreamingClient[FileSyncRequest, FileSyncResponse]

func (c *fileSyncServiceClient) ModifyFiles(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MetaDataChunk, FileMetaData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileSyncService_ServiceDesc.Streams[3], FileSyncService_ModifyFiles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MetaDataChunk, FileMetaData]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSyncService_ModifyFilesClient = grpc.BidiStreamingClient[MetaDataChunk, FileMetaData]

func (c *fileSyncServiceClient) CompareFiles(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FileMetaData, FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileSyncService_ServiceDesc.Streams[4], FileSyncService_CompareFiles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileMetaData, FileChunk]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSyncService_CompareFilesClient = grpc.BidiStreamingClient[FileMetaData, FileChunk]

// FileSyncServiceServer is the server API for FileSyncService service.
// All implementations must embed UnimplementedFileSyncServiceServer
// for forward compatibility.
type FileSyncServiceServer interface {
	State(*StateReq, grpc.ServerStreamingServer[StateRes]) error
	MetaData(grpc.BidiStreamingServer[MetaDataReq, FileMetaData]) error
	SyncFiles(grpc.BidiStreamingServer[FileSyncRequest, FileSyncResponse]) error
	ModifyFiles(grpc.BidiStreamingServer[MetaDataChunk, FileMetaData]) error
	CompareFiles(grpc.BidiStreamingServer[FileMetaData, FileChunk]) error
	mustEmbedUnimplementedFileSyncServiceServer()
}

// UnimplementedFileSyncServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileSyncServiceServer struct{}

func (UnimplementedFileSyncServiceServer) State(*StateReq, grpc.ServerStreamingServer[StateRes]) error {
	return status.Errorf(codes.Unimplemented, "method State not implemented")
}
func (UnimplementedFileSyncServiceServer) MetaData(grpc.BidiStreamingServer[MetaDataReq, FileMetaData]) error {
	return status.Errorf(codes.Unimplemented, "method MetaData not implemented")
}
func (UnimplementedFileSyncServiceServer) SyncFiles(grpc.BidiStreamingServer[FileSyncRequest, FileSyncResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SyncFiles not implemented")
}
func (UnimplementedFileSyncServiceServer) ModifyFiles(grpc.BidiStreamingServer[MetaDataChunk, FileMetaData]) error {
	return status.Errorf(codes.Unimplemented, "method ModifyFiles not implemented")
}
func (UnimplementedFileSyncServiceServer) CompareFiles(grpc.BidiStreamingServer[FileMetaData, FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method CompareFiles not implemented")
}
func (UnimplementedFileSyncServiceServer) mustEmbedUnimplementedFileSyncServiceServer() {}
func (UnimplementedFileSyncServiceServer) testEmbeddedByValue()                         {}

// UnsafeFileSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSyncServiceServer will
// result in compilation errors.
type UnsafeFileSyncServiceServer interface {
	mustEmbedUnimplementedFileSyncServiceServer()
}

func RegisterFileSyncServiceServer(s grpc.ServiceRegistrar, srv FileSyncServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileSyncServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileSyncService_ServiceDesc, srv)
}

func _FileSyncService_State_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StateReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileSyncServiceServer).State(m, &grpc.GenericServerStream[StateReq, StateRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSyncService_StateServer = grpc.ServerStreamingServer[StateRes]

func _FileSyncService_MetaData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSyncServiceServer).MetaData(&grpc.GenericServerStream[MetaDataReq, FileMetaData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSyncService_MetaDataServer = grpc.BidiStreamingServer[MetaDataReq, FileMetaData]

func _FileSyncService_SyncFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSyncServiceServer).SyncFiles(&grpc.GenericServerStream[FileSyncRequest, FileSyncResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSyncService_SyncFilesServer = grpc.BidiStreamingServer[FileSyncRequest, FileSyncResponse]

func _FileSyncService_ModifyFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSyncServiceServer).ModifyFiles(&grpc.GenericServerStream[MetaDataChunk, FileMetaData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSyncService_ModifyFilesServer = grpc.BidiStreamingServer[MetaDataChunk, FileMetaData]

func _FileSyncService_CompareFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSyncServiceServer).CompareFiles(&grpc.GenericServerStream[FileMetaData, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileSyncService_CompareFilesServer = grpc.BidiStreamingServer[FileMetaData, FileChunk]

// FileSyncService_ServiceDesc is the grpc.ServiceDesc for FileSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileSyncService",
	HandlerType: (*FileSyncServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "State",
			Handler:       _FileSyncService_State_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MetaData",
			Handler:       _FileSyncService_MetaData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SyncFiles",
			Handler:       _FileSyncService_SyncFiles_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ModifyFiles",
			Handler:       _FileSyncService_ModifyFiles_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CompareFiles",
			Handler:       _FileSyncService_CompareFiles_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/filesync.proto",
}
